//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> DO NOT CHANGE <<<<
////
/// 
///  Filename; C:\Users\Axel Lacapmesure\Google Drive\Facultad\2018_InstrumentacionYControl\afinador\prueba.py
///  Source class: Afinador2
///  Generation timestamp: 2018-12-10T15:34:52.162883
///  Class code hash: d8b86d2c295de2e888b64d479673cf2192e638e3
///
/////////////////////////////////////////////////////////////


#include "inodriver_bridge.h"

SerialCommand sCmd;

void ok() {
  Serial.println("OK");
}

void error(const char* msg) {
  Serial.print("ERROR: ");
  Serial.println(msg);
}

void error_i(int errno) {
  Serial.print("ERROR: ");
  Serial.println(errno);
}

void bridge_loop() {
  while (Serial.available() > 0) {
    sCmd.readSerial();
  }
}

void bridge_setup() {
  //// Setup callbacks for SerialCommand commands

  // All commands might return
  //    ERROR: <error message>

  // All set commands return 
  //    OK 
  // if the operation is successfull

  // All parameters are ascii encoded strings
  sCmd.addCommand("INFO?", getInfo); 

  sCmd.setDefaultHandler(unrecognized); 


  // tuned
  // <B> bool as string: True as "1", False as "0" 

  // Getter:
  //   TUN? 
  // Returns: <B> 
  sCmd.addCommand("TUN?", wrapperGet_TUN); 

  // Setter:
  //   TUN <B> 
  // Returns: OK or ERROR    
  sCmd.addCommand("TUN", wrapperSet_TUN); 

  // reference
  // <F> float as string 

  // Getter:
  //   REF? 
  // Returns: <F> 
  sCmd.addCommand("REF?", wrapperGet_REF); 

  // Setter:
  //   REF <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("REF", wrapperSet_REF); 

  // difference
  // <F> float as string 

  // Getter:
  //   DIFF? 
  // Returns: <F> 
  sCmd.addCommand("DIFF?", wrapperGet_DIFF); 

  // Setter:
  //   DIFF <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("DIFF", wrapperSet_DIFF); 

  // lenght
  // <I> int as string 

  // Getter:
  //   LEN? 
  // Returns: <I> 
  sCmd.addCommand("LEN?", wrapperGet_LEN); 

  // Setter:
  //   LEN <I> 
  // Returns: OK or ERROR    
  sCmd.addCommand("LEN", wrapperSet_LEN); 

  // tolerance
  // <F> float as string 

  // Getter:
  //   TOL? 
  // Returns: <F> 
  sCmd.addCommand("TOL?", wrapperGet_TOL); 

  // Setter:
  //   TOL <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("TOL", wrapperSet_TOL); 
}

//// Code 

void getInfo() {
  Serial.print("Afinador2,");
  Serial.println(COMPILE_DATE_TIME);
}

void unrecognized(const char *command) {
  error("Unknown command");
}
//// Auto generated Feat and DictFeat Code
// COMMAND: TUN, FEAT: tuned

void wrapperGet_TUN() { 
  Serial.println(get_TUN()); 
}; 


void wrapperSet_TUN() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  int err = set_TUN(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: REF, FEAT: reference

void wrapperGet_REF() { 
  Serial.println(get_REF()); 
}; 


void wrapperSet_REF() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_REF(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: DIFF, FEAT: difference

void wrapperGet_DIFF() { 
  Serial.println(get_DIFF()); 
}; 


void wrapperSet_DIFF() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_DIFF(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: LEN, FEAT: lenght

void wrapperGet_LEN() { 
  Serial.println(get_LEN()); 
}; 


void wrapperSet_LEN() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  int value = atoi(arg);

  int err = set_LEN(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: TOL, FEAT: tolerance

void wrapperGet_TOL() { 
  Serial.println(get_TOL()); 
}; 


void wrapperSet_TOL() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_TOL(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



